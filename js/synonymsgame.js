// ======== –ö–æ–Ω—Å—Ç–∞–Ω—Ç—ã –∏ —Å–æ—Å—Ç–æ—è–Ω–∏–µ ========
let shuffledPairs = [];
const TOTAL_ROUNDS = 10;
let currentIndex = 0, scoreToday = 0, usedHintsThisWord = 0;
let sessionStreak = 0; // —Å–µ—Ä–∏—è –≤–µ—Ä–Ω—ã—Ö –æ—Ç–≤–µ—Ç–æ–≤ –≤ —Ç–µ–∫—É—â–µ–π —Å–µ—Å—Å–∏–∏

const dateKey = new Date().toISOString().split('T')[0];
const scoreHistory = JSON.parse(localStorage.getItem('synonymScores') || '{}');

let availableHints = +localStorage.getItem('availableHints') || 0;
let starsEarned    = +localStorage.getItem('starsEarned') || 0;

// –£–∑–ª—ã UI –∫—ç—à–∏—Ä—É–µ–º –ø–æ—Å–ª–µ DOMContentLoaded
const UI = {
  statusImage: null,
  hintCount: null,
  hintButton: null,
  currentScore: null,
  scoreEmojis: null,
  hiddenWord: null,
  submitBtn: null,
  userInput: null,
  mainWord: null,
  result: null,
  roundNumber: null,
  restartContainer: null,
  hiddenWordResizeObs: null,
};

// ======== –£—Ç–∏–ª–∏—Ç—ã ========
function shuffle(array) {
  let m = array.length, t, i;
  while (m) {
    i = Math.floor(Math.random() * m--);
    t = array[m]; array[m] = array[i]; array[i] = t;
  }
  return array;
}

function setStatus(src) {
  if (UI.statusImage) UI.statusImage.src = src;
}

function updateHintDisplay() {
  if (UI.hintCount) UI.hintCount.textContent = availableHints;
  if (UI.hintButton) UI.hintButton.disabled = availableHints <= 0;
}

function updateCurrentScore() {
  if (UI.currentScore) UI.currentScore.textContent = `${scoreToday}/${TOTAL_ROUNDS}`;
  if (UI.scoreEmojis) UI.scoreEmojis.textContent = 'üèÜ'.repeat(starsEarned);
}

// ======== –û—Ç—Ä–∏—Å–æ–≤–∫–∞ —Å–∫—Ä—ã—Ç–æ–≥–æ —Å–ª–æ–≤–∞ ========
function updateHiddenWord() {
  if (!UI.hiddenWord || !shuffledPairs.length) return;

  const container = UI.hiddenWord;
  container.innerHTML = '';

  const pair = shuffledPairs[currentIndex];
  if (!pair) return;
  const synonym = pair.synonym;

  let reveal = usedHintsThisWord;

  // –∏–∑–º–µ—Ä—è–µ–º –±–∞–∑–æ–≤—É—é —à–∏—Ä–∏–Ω—É –±—É–∫–≤—ã
  const testBox = document.createElement('div');
  testBox.className = 'letter-box';
  testBox.style.visibility = 'hidden';
  testBox.textContent = 'M';
  container.appendChild(testBox);
  const bw = testBox.getBoundingClientRect().width || 10;
  const gap = parseFloat(getComputedStyle(container).columnGap) || 4;
  container.removeChild(testBox);

  const cw = container.clientWidth || 0;
  const maxPerLine = Math.max(2, Math.floor((cw + gap) / (bw + gap)));

  synonym.split(' ').forEach((word, wi) => {
    let chunks = [];
    for (let i = 0; i < word.length; i += maxPerLine) {
      chunks.push(word.slice(i, i + maxPerLine));
    }
    // –∏–∑–±–µ–≥–∞–µ–º –æ–¥–∏–Ω–æ–∫–∏—Ö —Å–∏–º–≤–æ–ª–æ–≤ –≤ –∫–æ–Ω—Ü–µ
    if (chunks.length > 1 && chunks[chunks.length - 1].length < 2) {
      const last = chunks.pop(), prev = chunks.pop();
      const need = 2 - last.length;
      const newPrev = prev.slice(0, prev.length - need);
      const newLast = prev.slice(prev.length - need) + last;
      if (newPrev) chunks.push(newPrev);
      chunks.push(newLast);
    }

    chunks.forEach(chunk => {
      const grp = document.createElement('div');
      grp.className = 'word-group';
      [...chunk].forEach(ch => {
        const box = document.createElement('div');
        box.className = `letter-box word-color-${wi % 6}`;
        if (ch === '-') {
          box.textContent = '-';
          box.classList.add('filled-box');
        } else if (reveal-- > 0) {
          box.textContent = ch.toUpperCase();
          box.classList.add('filled-box');
        }
        grp.appendChild(box);
      });
      container.appendChild(grp);
    });

    const sp = document.createElement('div');
    sp.className = 'space-box';
    container.appendChild(sp);
  });
}

// ======== –ü–æ–∫–∞–∑ —Å–ª–æ–≤–∞ —Ä–∞—É–Ω–¥–∞ ========
function displayWord() {
  if (!shuffledPairs.length) return;

  usedHintsThisWord = 0;

  if (UI.submitBtn) UI.submitBtn.disabled = false;
  if (UI.userInput) {
    UI.userInput.value = '';
    UI.userInput.focus();
  }

  if (UI.mainWord) UI.mainWord.textContent = shuffledPairs[currentIndex].main;

  if (UI.result) {
    UI.result.textContent = '';
    UI.result.classList.remove('correct', 'incorrect');
  }

  setStatus('img/green/neutral.svg');

  if (UI.roundNumber) {
    UI.roundNumber.textContent = `Round ${currentIndex + 1}`;
    UI.roundNumber.classList.remove('fade-in');
    void UI.roundNumber.offsetWidth; // –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫ –∞–Ω–∏–º–∞—Ü–∏–∏
    UI.roundNumber.classList.add('fade-in');
  }

  // –ü–µ—Ä–µ–Ω–µ—Å–ª–∏ –Ω–∞ —Å–ª–µ–¥—É—é—â–∏–π –∫–∞–¥—Ä, —á—Ç–æ–±—ã —Ä–∞–∑–º–µ—Ä—ã –±—ã–ª–∏ —Ç–æ—á–Ω—ã–µ
  requestAnimationFrame(updateHiddenWord);
  updateCurrentScore();
}

// ======== –ü–æ–¥—Å–∫–∞–∑–∫–∏ ========
function showHint() {
  if (availableHints > 0) {
    usedHintsThisWord++;
    availableHints--;
    localStorage.setItem('availableHints', availableHints);
    updateHintDisplay();
    updateHiddenWord();
  }
}

// ======== –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ—Ç–≤–µ—Ç–∞ (+ –±–æ–Ω—É—Å –∑–∞ —Å–µ—Ä–∏—é) ========
function checkAnswer() {
  if (!UI.submitBtn || UI.submitBtn.disabled) return; // –∞–Ω—Ç–∏-–¥–∞–±–ª

  const input = (UI.userInput?.value || '').trim().toLowerCase();
  const correct = (shuffledPairs[currentIndex]?.synonym || '').toLowerCase();
  const res = UI.result;

  res?.classList.remove('correct', 'incorrect');

  let delay;
  const isCorrect = input === correct;

  if (isCorrect) {
    scoreToday++;
    availableHints++;       // –±–∞–∑–æ–≤—ã–π –±–æ–Ω—É—Å –∑–∞ –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π
    sessionStreak++;        // —Å—á–∏—Ç–∞–µ–º —Å–µ—Ä–∏—é

    // –ö–∞–∂–¥—ã–µ 3 –ø–æ–¥—Ä—è–¥: +2 –ø–æ–¥—Å–∫–∞–∑–∫–∏
    if (sessionStreak % 3 === 0) {
      availableHints += 2;
      // –ú–æ–∂–Ω–æ –ø–æ–∫–∞–∑–∞—Ç—å –º–∏–Ω–∏-—Ç–æ—Å—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é, –µ—Å–ª–∏ –µ—Å—Ç—å –≥–¥–µ:
      // res && (res.textContent = 'Correct! (+2 hints for 3-in-a-row!)');
    }

    if (res) { res.textContent = 'Correct!'; res.classList.add('correct'); }
    setStatus('img/green/right.svg');
    delay = 2000;
  } else {
    sessionStreak = 0; // —Å–±—Ä–æ—Å —Å–µ—Ä–∏–∏
    availableHints = Math.max(0, availableHints - 1);
    if (res) { res.textContent = `Incorrect. Answer: ${correct}`; res.classList.add('incorrect'); }
    setStatus('img/green/wrong.svg');
    delay = 5000;
  }

  updateWordStats(isCorrect);

  UI.submitBtn.disabled = true;
  localStorage.setItem('availableHints', availableHints);
  updateHintDisplay();

  if (currentIndex < TOTAL_ROUNDS - 1) {
    currentIndex++;
    setTimeout(displayWord, delay);
  } else {
    setTimeout(endGame, delay);
  }
}

// ======== –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ —Å–ª–æ–≤ ========
function updateWordStats(isCorrect) {
  const pair = shuffledPairs[currentIndex];
  if (!pair) return;

  const word = pair.main;
  const stats = JSON.parse(localStorage.getItem('wordStats') || '{}');
  stats[word] = stats[word] || { views: 0, errors: 0, correctInARow: 0 };
  stats[word].views++;

  if (isCorrect) {
    stats[word].correctInARow++;
    // –ï—Å–ª–∏ 3 –ø–æ–¥—Ä—è–¥ ‚Äî —Å–ª–æ–≤–æ –ø–µ—Ä–µ—Å—Ç–∞—ë—Ç –±—ã—Ç—å –ø—Ä–æ–±–ª–µ–º–Ω—ã–º
    if (stats[word].correctInARow >= 3) {
      stats[word].errors = 0; // ¬´–æ—Å–≤–æ–µ–Ω–Ω–æ–µ¬ª
    }
  } else {
    stats[word].errors++;
    stats[word].correctInARow = 0;
  }

  localStorage.setItem('wordStats', JSON.stringify(stats));
}

// ======== –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ –∏–≥—Ä—ã ========
function endGame() {
  scoreHistory[dateKey] = scoreToday;
  localStorage.setItem('synonymScores', JSON.stringify(scoreHistory));

  const res = UI.result;
  res?.classList.remove('correct', 'incorrect');

  if (scoreToday === TOTAL_ROUNDS) {
    setStatus('img/green/winner.svg');
    starsEarned++;
    if (starsEarned >= 3) {
      availableHints += 10;
      starsEarned = 0;
    }
    localStorage.setItem('availableHints', availableHints);
    localStorage.setItem('starsEarned', starsEarned);
    if (res) res.textContent = `üèÜ Congratulations! You won! Your score: ${scoreToday}/${TOTAL_ROUNDS}.`;
  } else {
    setStatus('img/green/loser.svg');
    if (res) res.textContent = `Keep practicing to win next time. Your score: ${scoreToday}/${TOTAL_ROUNDS}.`;
  }

  UI.submitBtn && (UI.submitBtn.disabled = true);
  updateHintDisplay();
  updateCurrentScore();

  if (UI.restartContainer) {
    UI.restartContainer.innerHTML = `
      <br>
      <button class="restart-button blue-button" onclick="startGame()">Try Again</button>
      <button class="restart-button red-button" onclick="restartWithNewWords()">New Game</button>
      <button class="nextbutton" onclick="location.href='spelling.html'">Next</button>
    `;
  }
}

// ======== –ü—Ä–∏–æ—Ä–∏—Ç–∏–∑–∞—Ü–∏—è —Å–ª–æ–≤: –Ω–æ–≤—ã–µ ‚Üí –ø—Ä–æ–±–ª–µ–º–Ω—ã–µ ‚Üí –æ—Å–≤–æ–µ–Ω–Ω—ã–µ (–¥–ª—è –¥–æ–±–æ—Ä–∞) ========
function getAdaptiveShuffledPairs() {
  // –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è wordPairs
  if (typeof wordPairs === 'undefined' || !Array.isArray(wordPairs) || wordPairs.length === 0) {
    console.warn('wordPairs –Ω–µ –æ–ø—Ä–µ–¥–µ–ª—ë–Ω –∏–ª–∏ –ø—É—Å—Ç.');
    return [];
  }

  const wordStats = JSON.parse(localStorage.getItem('wordStats') || '{}');

  const tagged = wordPairs.map(pair => {
    const s = wordStats[pair.main] || { views: 0, errors: 0, correctInARow: 0 };
    const isNew = s.views < 3;
    const isProblem = s.errors > 0;          // –ø—Ä–æ–±–ª–µ–º–Ω–æ–µ –ø–æ–∫–∞ –µ—Å—Ç—å –æ—à–∏–±–∫–∏
    const isMastered = !isNew && !isProblem; // –æ—Å–≤–æ–µ–Ω–Ω–æ–µ: –Ω–µ –Ω–æ–≤–æ–µ –∏ –±–µ–∑ –æ—à–∏–±–æ–∫
    return { ...pair, _views: s.views, _isNew: isNew, _isProblem: isProblem, _isMastered: isMastered };
  });

  const newWords      = tagged.filter(p => p._isNew);
  const problemWords  = tagged.filter(p => p._isProblem);
  const masteredWords = tagged.filter(p => p._isMastered);

  shuffle(newWords);
  shuffle(problemWords);
  shuffle(masteredWords);

  let combined = [...newWords, ...problemWords];
  if (combined.length < TOTAL_ROUNDS) {
    combined = combined.concat(masteredWords);
  }

  return combined.slice(0, TOTAL_ROUNDS);
}

// ======== –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫ –∏ —Å—Ç–∞—Ä—Ç ========
function restartWithNewWords() {
  shuffledPairs = getAdaptiveShuffledPairs();
  startGame();
}

function startGame() {
  if (!shuffledPairs.length) {
    shuffledPairs = getAdaptiveShuffledPairs();
  }
  currentIndex = 0;
  scoreToday = 0;
  usedHintsThisWord = 0;
  sessionStreak = 0;

  if (UI.result) UI.result.textContent = "Let's get started!";
  if (UI.restartContainer) UI.restartContainer.innerHTML = '';

  updateHintDisplay();
  updateCurrentScore();
  displayWord();
}

// ======== –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø–æ—Å–ª–µ –∑–∞–≥—Ä—É–∑–∫–∏ DOM ========
document.addEventListener('DOMContentLoaded', () => {
  // –ö—ç—à–∏—Ä—É–µ–º —É–∑–ª—ã
  UI.statusImage      = document.querySelector('.status-image');
  UI.hintCount        = document.getElementById('hintCount');
  UI.hintButton       = document.getElementById('hintButton');
  UI.currentScore     = document.getElementById('currentScore');
  UI.scoreEmojis      = document.getElementById('scoreEmojis');
  UI.hiddenWord       = document.getElementById('hiddenWord');
  UI.submitBtn        = document.getElementById('submitBtn');
  UI.userInput        = document.getElementById('userInput');
  UI.mainWord         = document.getElementById('mainWord');
  UI.result           = document.getElementById('result');
  UI.roundNumber      = document.getElementById('roundNumber');
  UI.restartContainer = document.getElementById('restartContainer');

  // ARIA –¥–ª—è –æ–∑–≤—É—á–∏–≤–∞–Ω–∏—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ (–µ—Å–ª–∏ –Ω–µ—Ç ‚Äî –Ω–µ —Å—Ç—Ä–∞—à–Ω–æ)
  if (UI.result && !UI.result.hasAttribute('aria-live')) {
    UI.result.setAttribute('aria-live', 'polite');
  }

  // –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
  UI.userInput && UI.userInput.addEventListener('keyup', e => {
    if (e.key === 'Enter') {
      const v = e.currentTarget.value.trim();
      if (!v) { showHint(); return; } // Enter –Ω–∞ –ø—É—Å—Ç–æ–º –ø–æ–ª–µ ‚Äî –¥–∞—ë—Ç –ø–æ–¥—Å–∫–∞–∑–∫—É
      checkAnswer();
    }
  });

  UI.submitBtn && UI.submitBtn.addEventListener('click', checkAnswer);
  UI.hintButton && UI.hintButton.addEventListener('click', showHint);

  // –°–ª–µ–¥–∏–º –∑–∞ –∏–∑–º–µ–Ω–µ–Ω–∏–µ–º —à–∏—Ä–∏–Ω—ã –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞ —Å–∫—Ä—ã—Ç–æ–≥–æ —Å–ª–æ–≤–∞
  if (UI.hiddenWord && 'ResizeObserver' in window) {
    UI.hiddenWordResizeObs = new ResizeObserver(() => updateHiddenWord());
    UI.hiddenWordResizeObs.observe(UI.hiddenWord);
  } else {
    window.addEventListener('resize', updateHiddenWord);
  }

  // –ü–µ—Ä–≤—ã–π –∑–∞–ø—É—Å–∫
  restartWithNewWords();
});
