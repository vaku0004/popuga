// ======== –ö–æ–Ω—Å—Ç–∞–Ω—Ç—ã –∏ —Å–æ—Å—Ç–æ—è–Ω–∏–µ ========
let shuffledPairs = [];
const TOTAL_ROUNDS = 10;

let currentIndex = 0, scoreToday = 0, usedHintsThisWord = 0;
let sessionStreak = 0; // —Å–µ—Ä–∏—è –≤–µ—Ä–Ω—ã—Ö –æ—Ç–≤–µ—Ç–æ–≤ –≤ —Ç–µ–∫—É—â–µ–π —Å–µ—Å—Å–∏–∏

const dateKey = new Date().toISOString().split('T')[0];
const scoreHistory = JSON.parse(localStorage.getItem('synonymScores') || '{}');

let availableHints = +localStorage.getItem('availableHints') || 0;
let starsEarned    = +localStorage.getItem('starsEarned') || 0;

// UI-—É–∑–ª—ã –∫—ç—à–∏—Ä—É–µ–º –ø–æ—Å–ª–µ DOMContentLoaded
const UI = {
  statusImage: null,
  hintCount: null,
  hintButton: null,
  currentScore: null,
  scoreEmojis: null,
  hiddenWord: null,        // —Ç—É—Ç –æ—Ç—Ä–∏—Å—É–µ–º "–±–∞–Ω–∫" —Ç–æ–∫–µ–Ω–æ–≤ –∏ "–æ—Ç–≤–µ—Ç"
  submitBtn: null,
  userInput: null,         // –æ—Å—Ç–∞–≤–ª—è–µ–º, –Ω–æ —Å–∫—Ä—ã–≤–∞—Ç—å/–Ω–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å ‚Äî –ø–æ –∂–µ–ª–∞–Ω–∏—é
  mainWord: null,
  result: null,
  roundNumber: null,
  restartContainer: null,
  hiddenWordResizeObs: null,
};

// –†–∞–±–æ—á–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è —Ç–µ–∫—É—â–µ–≥–æ —Ä–∞—É–Ω–¥–∞ (—Ç–æ–∫–µ–Ω—ã)
let tokenBank = [];   // [{id, text}]
let tokenAnswer = []; // –º–∞—Å—Å–∏–≤ id –≤ –ø–æ—Ä—è–¥–∫–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
let correctTokens = [];

// ======== –£—Ç–∏–ª–∏—Ç—ã ========
function shuffle(array) {
  let m = array.length, t, i;
  while (m) {
    i = Math.floor(Math.random() * m--);
    t = array[m]; array[m] = array[i]; array[i] = t;
  }
  return array;
}

function setStatus(src) {
  if (UI.statusImage) UI.statusImage.src = src;
}

function updateHintDisplay() {
  if (UI.hintCount) UI.hintCount.textContent = availableHints;
  if (UI.hintButton) UI.hintButton.disabled = availableHints <= 0;
}

function updateCurrentScore() {
  if (UI.currentScore) UI.currentScore.textContent = `${scoreToday}/${TOTAL_ROUNDS}`;
  if (UI.scoreEmojis) UI.scoreEmojis.textContent = 'üèÜ'.repeat(starsEarned);
}

function norm(s){ return s.replace(/\s+/g,' ').trim().toLowerCase(); }

// ======== –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Ç–æ–∫–µ–Ω–æ–≤ –¥–ª—è —Ä–∞—É–Ω–¥–∞ ========
function sentenceToTokens(sentence) {
  // –ü—Ä–æ—Å—Ç–æ–π —Å–ø–ª–∏—Ç –ø–æ –ø—Ä–æ–±–µ–ª–∞–º; –ø—Ä–∏ –∂–µ–ª–∞–Ω–∏–∏ –º–æ–∂–Ω–æ —É–º–Ω–µ–µ: —Å–æ—Ö—Ä–∞–Ω—è—Ç—å –∑–Ω–∞–∫–∏ –ø—Ä–µ–ø–∏–Ω–∞–Ω–∏—è –æ—Ç–¥–µ–ª—å–Ω—ã–º–∏ —Ç–æ–∫–µ–Ω–∞–º–∏
  return sentence.split(/\s+/).filter(Boolean);
}

function buildRoundTokens(correctSentence, optionalScrambled) {
  const base = sentenceToTokens(correctSentence);
  correctTokens = base.slice(); // —ç—Ç–∞–ª–æ–Ω
  let scrambled = optionalScrambled ? sentenceToTokens(optionalScrambled) : base.slice();
  // –ü–µ—Ä–µ–º–µ—à–∞–µ–º –¥–æ –æ—Ç–ª–∏—á–∏—è –æ—Ç –ø—Ä–∞–≤–∏–ª—å–Ω–æ–≥–æ –ø–æ—Ä—è–¥–∫–∞
  let tries = 0;
  while (tries < 20 && scrambled.every((w, i) => w === base[i]) && base.length > 1) {
    shuffle(scrambled);
    tries++;
  }
  // —É–ø–∞–∫—É–µ–º –≤ –æ–±—ä–µ–∫—Ç—ã —Å id
  const uid = () => Math.random().toString(36).slice(2,9);
  tokenBank = scrambled.map(w => ({ id: uid(), text: w }));
  tokenAnswer = []; // –ø—É—Å—Ç–æ–π –æ—Ç–≤–µ—Ç
}

// ======== –†–µ–Ω–¥–µ—Ä –±–∞–Ω–∫–∞ –∏ –æ—Ç–≤–µ—Ç–∞ ========
function renderTokens() {
  if (!UI.hiddenWord) return;

  UI.hiddenWord.innerHTML = '';

  // –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä—ã
  const bank = document.createElement('div');
  bank.id = 'tokenBank';
  bank.className = 'token-bank';

  const answer = document.createElement('div');
  answer.id = 'tokenAnswer';
  answer.className = 'token-answer';

  // –∑–∞–≥–æ–ª–æ–≤–∫–∏ (–Ω–µ–æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ)
  const bankTitle = document.createElement('div');
  bankTitle.className = 'token-title';
  bankTitle.textContent = 'Words';
  const answerTitle = document.createElement('div');
  answerTitle.className = 'token-title';
  answerTitle.textContent = 'Your sentence';

  // —Ç–æ–∫–µ–Ω—ã –±–∞–Ω–∫–∞
  const usedIds = new Set(tokenAnswer);
  tokenBank.forEach(tok => {
    if (usedIds.has(tok.id)) return; // —É–∂–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω –≤ –æ—Ç–≤–µ—Ç–µ
    const chip = document.createElement('button');
    chip.type = 'button';
    chip.className = 'token-chip';
    chip.textContent = tok.text;
    chip.addEventListener('click', () => moveTokenToAnswer(tok.id));
    bank.appendChild(chip);
  });

  // —Ç–æ–∫–µ–Ω—ã –æ—Ç–≤–µ—Ç–∞
  tokenAnswer.forEach(id => {
    const tok = tokenBank.find(t => t.id === id);
    if (!tok) return;
    const chip = document.createElement('button');
    chip.type = 'button';
    chip.className = 'token-chip selected';
    chip.textContent = tok.text;
    chip.title = 'Click to remove';
    chip.addEventListener('click', () => removeTokenFromAnswer(id));
    answer.appendChild(chip);
  });

  UI.hiddenWord.appendChild(bankTitle);
  UI.hiddenWord.appendChild(bank);
  UI.hiddenWord.appendChild(answerTitle);
  UI.hiddenWord.appendChild(answer);
}

function moveTokenToAnswer(id) {
  if (!tokenAnswer.includes(id)) {
    tokenAnswer.push(id);
    renderTokens();
  }
}

function removeTokenFromAnswer(id) {
  tokenAnswer = tokenAnswer.filter(x => x !== id);
  renderTokens();
}

// ======== –û—Ç—Ä–∏—Å–æ–≤–∫–∞ —Ä–∞—É–Ω–¥–∞ ========
function displayWord() {
  if (!shuffledPairs.length) return;

  usedHintsThisWord = 0;

  if (UI.submitBtn) UI.submitBtn.disabled = false;
  if (UI.userInput) { UI.userInput.value = ''; } // –Ω–µ –∏—Å–ø–æ–ª—å–∑—É–µ–º, –ø—Ä–æ—Å—Ç–æ –æ—á–∏—â–∞–µ–º
  if (UI.mainWord)  UI.mainWord.textContent = shuffledPairs[currentIndex].main || 'Arrange the words';

  if (UI.result) {
    UI.result.textContent = '';
    UI.result.classList.remove('correct', 'incorrect');
  }

  setStatus('img/green/neutral.svg');

  if (UI.roundNumber) {
    UI.roundNumber.textContent = `Round ${currentIndex + 1}`;
    UI.roundNumber.classList.remove('fade-in');
    void UI.roundNumber.offsetWidth;
    UI.roundNumber.classList.add('fade-in');
  }

  // –ø–æ–¥–≥–æ—Ç–æ–≤–∫–∞ —Ç–æ–∫–µ–Ω–æ–≤ –¥–ª—è —Ç–µ–∫—É—â–µ–≥–æ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è
  const pair = shuffledPairs[currentIndex];
  const correct = pair.correct;
  const scrambled = pair.scrambled; // –æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ (–µ—Å–ª–∏ —Ö–æ—á–µ—à—å –∑–∞–¥–∞–≤–∞—Ç—å —Ä—É–∫–∞–º–∏)
  buildRoundTokens(correct, scrambled);

  // —Ä–µ–Ω–¥–µ—Ä
  renderTokens();
  updateCurrentScore();
}

// ======== –ü–æ–¥—Å–∫–∞–∑–∫–∞: –ø–µ—Ä–µ–Ω–æ—Å–∏—Ç —Å–ª–µ–¥—É—é—â–µ–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–µ —Å–ª–æ–≤–æ ========
function showHint() {
  if (availableHints <= 0) return;

  const pair = shuffledPairs[currentIndex];
  const target = correctTokens;

  // –æ–ø—Ä–µ–¥–µ–ª—è–µ–º —Å–ª–µ–¥—É—é—â—É—é –ø—Ä–∞–≤–∏–ª—å–Ω—É—é –ø–æ–∑–∏—Ü–∏—é
  const currentBuilt = tokenAnswer.map(id => {
    const t = tokenBank.find(x => x.id === id);
    return t ? t.text : '';
  });

  // —É–∂–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ —Å–æ–±—Ä–∞–Ω–Ω–∞—è –ø—Ä–µ—Ñ–∏–∫—Å–Ω–∞—è —á–∞—Å—Ç—å?
  let nextIndex = currentBuilt.length; // –ø–æ–∑–∏—Ü–∏—è —Å–ª–µ–¥—É—é—â–µ–≥–æ —Å–ª–æ–≤–∞
  if (nextIndex >= target.length) return; // –≤—Å—ë —É–∂–µ —Å–æ–±—Ä–∞–Ω–æ

  const neededWord = target[nextIndex]; // —Å–ª–µ–¥—É—é—â–µ–µ —Å–ª–æ–≤–æ, –∫–æ—Ç–æ—Ä–æ–µ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å
  // –Ω–∞–π–¥—ë–º –µ–≥–æ id –≤ –±–∞–Ω–∫–µ
  const candidate = tokenBank.find(t => t.text.toLowerCase() === neededWord.toLowerCase() && !tokenAnswer.includes(t.id));
  if (candidate) {
    usedHintsThisWord++;
    availableHints--;
    tokenAnswer.push(candidate.id);
    localStorage.setItem('availableHints', availableHints);
    updateHintDisplay();
    renderTokens();
  }
}

// ======== –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ—Ç–≤–µ—Ç–∞ (+ –±–æ–Ω—É—Å –∑–∞ —Å–µ—Ä–∏—é) ========
function checkAnswer() {
  if (!UI.submitBtn || UI.submitBtn.disabled) return; // –∞–Ω—Ç–∏-–¥–∞–±–ª
  if (!shuffledPairs.length) return;

  const res = UI.result;

  const userSentence = tokenAnswer.map(id => {
    const t = tokenBank.find(x => x.id === id);
    return t ? t.text : '';
  }).join(' ').trim();

  const pair = shuffledPairs[currentIndex];
  const correct = pair.correct;
  const alts = Array.isArray(pair.alts) ? pair.alts : [];

  const isCorrect =
    norm(userSentence) === norm(correct) ||
    alts.some(a => norm(a) === norm(userSentence));

  res?.classList.remove('correct', 'incorrect');

  let delay;
  if (isCorrect) {
    scoreToday++;
    availableHints++;       // –±–∞–∑–æ–≤—ã–π –±–æ–Ω—É—Å –∑–∞ –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π
    sessionStreak++;        // —Å–µ—Ä–∏—è

    if (sessionStreak % 3 === 0) {
      availableHints += 2;  // +2 –∑–∞ –∫–∞–∂–¥—ã–µ 3 –ø–æ–¥—Ä—è–¥
    }

    if (res) { res.textContent = 'Correct!'; res.classList.add('correct'); }
    setStatus('img/green/right.svg');
    delay = 2000;
  } else {
    sessionStreak = 0;
    availableHints = Math.max(0, availableHints - 1);
    if (res) {
      const show = correct;
      res.textContent = `Incorrect. Answer: ${show}`;
      res.classList.add('incorrect');
    }
    setStatus('img/green/wrong.svg');
    delay = 5000;
  }

  updateWordStats(isCorrect);

  UI.submitBtn.disabled = true;
  localStorage.setItem('availableHints', availableHints);
  updateHintDisplay();

  if (currentIndex < TOTAL_ROUNDS - 1) {
    currentIndex++;
    setTimeout(displayWord, delay);
  } else {
    setTimeout(endGame, delay);
  }
}

// ======== –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Å–ª–æ–≤ (–ø–æ –∫–ª—é—á—É main) ========
function updateWordStats(isCorrect) {
  const pair = shuffledPairs[currentIndex];
  if (!pair) return;

  const word = pair.main; // –∫–ª—é—á —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ ‚Äî –∑–∞–≥–æ–ª–æ–≤–æ–∫ –∑–∞–¥–∞–Ω–∏—è
  const stats = JSON.parse(localStorage.getItem('wordStats') || '{}');
  stats[word] = stats[word] || { views: 0, errors: 0, correctInARow: 0 };
  stats[word].views++;

  if (isCorrect) {
    stats[word].correctInARow++;
    if (stats[word].correctInARow >= 3) {
      stats[word].errors = 0; // ¬´–æ—Å–≤–æ–µ–Ω–Ω–æ–µ¬ª
    }
  } else {
    stats[word].errors++;
    stats[word].correctInARow = 0;
  }

  localStorage.setItem('wordStats', JSON.stringify(stats));
}

// ======== –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ –∏–≥—Ä—ã ========
function endGame() {
  scoreHistory[dateKey] = scoreToday;
  localStorage.setItem('synonymScores', JSON.stringify(scoreHistory));

  const res = UI.result;
  res?.classList.remove('correct', 'incorrect');

  if (scoreToday === TOTAL_ROUNDS) {
    setStatus('img/green/winner.svg');
    starsEarned++;
    if (starsEarned >= 3) {
      availableHints += 10;
      starsEarned = 0;
    }
    localStorage.setItem('availableHints', availableHints);
    localStorage.setItem('starsEarned', starsEarned);
    if (res) res.textContent = `üèÜ Congratulations! You won! Your score: ${scoreToday}/${TOTAL_ROUNDS}.`;
  } else {
    setStatus('img/green/loser.svg');
    if (res) res.textContent = `Keep practicing to win next time. Your score: ${scoreToday}/${TOTAL_ROUNDS}.`;
  }

  UI.submitBtn && (UI.submitBtn.disabled = true);
  updateHintDisplay();
  updateCurrentScore();

  if (UI.restartContainer) {
    UI.restartContainer.innerHTML = `
      <br>
      <button class="restart-button blue-button" onclick="startGame()">Try Again</button>
      <button class="restart-button red-button" onclick="restartWithNewWords()">New Game</button>
      <button class="nextbutton" onclick="location.href='spelling.html'">Next</button>
    `;
  }
}

// ======== –ü—Ä–∏–æ—Ä–∏—Ç–∏–∑–∞—Ü–∏—è –∑–∞–¥–∞–Ω–∏–π: –Ω–æ–≤—ã–µ ‚Üí –ø—Ä–æ–±–ª–µ–º–Ω—ã–µ ‚Üí –æ—Å–≤–æ–µ–Ω–Ω—ã–µ (–¥–ª—è –¥–æ–±–æ—Ä–∞) ========
function getAdaptiveShuffledPairs() {
  if (typeof wordPairs === 'undefined' || !Array.isArray(wordPairs) || wordPairs.length === 0) {
    console.warn('wordPairs –Ω–µ –æ–ø—Ä–µ–¥–µ–ª—ë–Ω –∏–ª–∏ –ø—É—Å—Ç.');
    return [];
  }

  const wordStats = JSON.parse(localStorage.getItem('wordStats') || '{}');

  const tagged = wordPairs.map(pair => {
    const key = pair.main;
    const s = wordStats[key] || { views: 0, errors: 0, correctInARow: 0 };
    const isNew = s.views < 3;
    const isProblem = s.errors > 0;
    const isMastered = !isNew && !isProblem;
    return { ...pair, _views: s.views, _isNew: isNew, _isProblem: isProblem, _isMastered: isMastered };
  });

  const newItems      = tagged.filter(p => p._isNew);
  const problemItems  = tagged.filter(p => p._isProblem);
  const masteredItems = tagged.filter(p => p._isMastered);

  shuffle(newItems);
  shuffle(problemItems);
  shuffle(masteredItems);

  let combined = [...newItems, ...problemItems];
  if (combined.length < TOTAL_ROUNDS) combined = combined.concat(masteredItems);

  return combined.slice(0, TOTAL_ROUNDS);
}

// ======== –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫ –∏ —Å—Ç–∞—Ä—Ç ========
function restartWithNewWords() {
  shuffledPairs = getAdaptiveShuffledPairs();
  startGame();
}

function startGame() {
  if (!shuffledPairs.length) shuffledPairs = getAdaptiveShuffledPairs();

  currentIndex = 0;
  scoreToday = 0;
  usedHintsThisWord = 0;
  sessionStreak = 0;

  if (UI.result) UI.result.textContent = "Let's get started!";
  if (UI.restartContainer) UI.restartContainer.innerHTML = '';

  updateHintDisplay();
  updateCurrentScore();
  displayWord();
}

// ======== –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è ========
document.addEventListener('DOMContentLoaded', () => {
  UI.statusImage      = document.querySelector('.status-image');
  UI.hintCount        = document.getElementById('hintCount');
  UI.hintButton       = document.getElementById('hintButton');
  UI.currentScore     = document.getElementById('currentScore');
  UI.scoreEmojis      = document.getElementById('scoreEmojis');
  UI.hiddenWord       = document.getElementById('hiddenWord');
  UI.submitBtn        = document.getElementById('submitBtn');
  UI.userInput        = document.getElementById('userInput'); // –º–æ–∂–Ω–æ —Å–∫—Ä—ã—Ç—å –≤ –≤–µ—Ä—Å—Ç–∫–µ
  UI.mainWord         = document.getElementById('mainWord');
  UI.result           = document.getElementById('result');
  UI.roundNumber      = document.getElementById('roundNumber');
  UI.restartContainer = document.getElementById('restartContainer');

  if (UI.result && !UI.result.hasAttribute('aria-live')) {
    UI.result.setAttribute('aria-live', 'polite');
  }

  UI.submitBtn && UI.submitBtn.addEventListener('click', checkAnswer);
  UI.hintButton && UI.hintButton.addEventListener('click', showHint);

  // –ü–æ–¥–¥–µ—Ä–∂–∫–∞ resize –¥–ª—è –æ–±—Ç–µ–∫–∞–Ω–∏—è (–µ—Å–ª–∏ –Ω—É–∂–Ω–æ, –º–æ–∂–Ω–æ —É–¥–∞–ª–∏—Ç—å)
  if (UI.hiddenWord && 'ResizeObserver' in window) {
    UI.hiddenWordResizeObs = new ResizeObserver(() => renderTokens());
    UI.hiddenWordResizeObs.observe(UI.hiddenWord);
  } else {
    window.addEventListener('resize', renderTokens);
  }

  restartWithNewWords();
});
